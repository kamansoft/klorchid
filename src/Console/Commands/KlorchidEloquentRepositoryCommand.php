<?php

namespace Kamansoft\Klorchid\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Console\GeneratorCommand;
use Orchid\Platform\Dashboard;
use Illuminate\Support\Str;

class KlorchidEloquentRepositoryCommand extends GeneratorCommand
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'klorchid:repository 
        {name : The name of the repository class }
        {model? : The full model name with its namespace like: \Namespace\Model\ModelName } 
        {--a|useAppNamePath : Create files inside a folder with the name as laravel app_name config value}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generate a new klorchid eloquent repository class';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'KlorchidEloquentBasedRepository';


    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub(): string
    {
        //return app_path('Kaman/resources/stubs/keditscreen.stub');
        return __DIR__ . '/../../../resources/stubs/klorchid.eloquent.repository.stub';
    }

        /**
     * Get the default namespace for the class.
     *
     * @param string $rootNamespace
     *
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace): string
    {

        $app_name_path = '';
        $path_to_return  = $rootNamespace;

        if ($this->option('useAppNamePath')) {
            $app_name = Str::studly((config('app.name')));
            $app_name_repositories_path = '\\'.$app_name.'\Repositories';
            $path_to_return = $path_to_return.$app_name_repositories_path;
        }else{
            $path_to_return = $path_to_return.'\Repositories';
        }

        return $path_to_return;

    }

    protected function replaceClass($stub, $name)
    {
        $stub =  parent::replaceClass($stub, $name); // TODO: Change the autogenerated stub


        $replace = [$this->getModelClassName(),$this->getClassNamespaceFromPath($this->argument('model'))];
        return str_replace(['DummyModelClassName','DummyModelFullClassName'], $replace, $stub);


    }

    protected function getClassNamespaceFromPath($path){
        return str_replace('/','\\',$path);
    }

    protected function getModelClassName(){
        $model_name = $this->argument('model');
        $exploded = explode('/',$model_name);
        return end($exploded);
    }


}
