<?php

namespace Kamansoft\Klorchid\Console\Commands;


use Illuminate\Foundation\Console\RequestMakeCommand;
use Illuminate\Support\Str;


class KlorchidStorableFormRequestCommand extends RequestMakeCommand
{


    public const REQUEST_NAME_SUFFIX = 'StorableFormRequest';

    /**
     * The console command name and options.
     *
     * @var string
     */
    protected $signature = 'klorchid:make:storable-form-request
    {name : name of the storable form request class }
    {--name-is-model : pass this option to tell the command that the class name is a model class name }
    {--route-param-name= : The route param name used at the route as param (id) to bind a model.}
    {--add-suffix : adds the "StorableFormRequest" suffix to the class name.}
    {--create-permission= : The orchid permission to insert a new registry to db from model.}
    {--edit-permission= : The orchid permission to edit a new registry to db from model.}

    ';


    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Creates a new klorchid storable form request';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'KlorchidStorableFormRequest';

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return __DIR__ . '/../../../resources/stubs/klorchid.storable_form_request.stub';
    }


    public function getRouteParamName()
    {
        if (!empty($this->input->getOption('route-param-name'))) {
            return $this->input->getOption('route-param-name');
        }

        return null;
    }

    protected function replaceClass($stub, $name)
    {
        $stub = parent::replaceClass($stub, $name); // TODO: Change the autogenerated stub


        $replace = [
            $this->input->getOption('create-permission')??$this->ask('Type the permission key for creating a new entry from this request', 'klorchid.general.create'),
            $this->input->getOption('edit-permission')??$this->ask('Type the permission key for editing a new entry from this request', 'klorchid.general.edit'),
            $this->getRouteParamName()??$this->ask('Type the route param name', param_name_for_model($this->qualifyClass(parent::getNameInput())))
        ];
        return str_replace([
            'dummy.create.permission.const',
            'dummy.edit.permission.const',
            'dummyEntityRouteParamName',
        ], $replace, $stub);
    }
    protected function getNameInput()
    {
        $name = parent::getNameInput() ;
        if ($this->input->getOption('name-is-model')){
            $exploded_name  = explode('/', $name);

            return $this->addSuffix(end($exploded_name));
        }
        if ($this->input->getOption('add-suffix')) {
            return $this->addSuffix($name);
        }

        return parent::getNameInput();
    }
    private function addSuffix($name)
    {


        if (str_ends_with($name, self::REQUEST_NAME_SUFFIX)) {
            return $name;
        }

        return $name . self::REQUEST_NAME_SUFFIX;
    }


    /*
    protected function getNameInput()
    {
        return $this->getClassNameHandler();
    }

    private function getClassNameHandler()
    {
        if (empty($this->input->getOption('model'))) {
            //return parent::getNameInput();
            $exploded = explode('/', parent::getNameInput());
            return end($exploded).'StorableFormRequest';

        }
        return parent::getNameInput();

    }

    protected function replaceClass($stub, $name)
    {
        $stub = parent::replaceClass($stub, $name); // TODO: Change the autogenerated stub


        $replace = [
            $this->getModelFullClassNameHandler(),
            $this->getModelClassName(),
            $this->getRouteParamName()];
        return str_replace([
            'DummyModelFullClassName',
            'DummyModelClassName',
            'dummy_route_param_name',
        ], $replace, $stub);


    }

    private function getModelClassName()
    {
        $model_name = $this->getModelFullClassNameHandler();
        $exploded = explode('\\', $model_name);

        return end($exploded);
    }

    private function getModelFullClassNameHandler()
    {
        if (empty($this->input->getOption('model'))) {
            return $this->qualifyClass(parent::getNameInput());
        }

        return $this->qualifyClass($this->input->getOption('model'));
    }

    private function getRouteParamName()
    {
        if (empty($this->input->getOption('route-param-name'))) {
            return Str::snake($this->getModelClassName());
        }
        return $this->input->getOption('route-param-name');
    }
    */
}
