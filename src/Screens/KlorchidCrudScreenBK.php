<?php

namespace Kamansoft\Klorchid\Screens;

use AdvancedJsonRpc\Request;
use Kamansoft\Klorchid\Models\KlorchidEloquentModel;
use Kamansoft\Klorchid\Screens\Traits\KlorchidScreensStatusSetTrait;
use Kamansoft\Klorchid\Screens\Actions\ConfirmationButton;

abstract class KlorchidCrudScreenBK extends KlorchidMultiModeScreen
{
    //use KlorchidScreensStatusSetTrait;

    private bool $display_save_button = true;

    public function __construct()
    {
        parent::__construct();

    }

    public function getDisplaySaveButton()
    {
        return $this->display_save_button;
    }

    public function setDisplaySaveButton(bool $status)
    {
        $this->display_save_button = $status;
        return $this;
    }
    public function saveButton()
    {

        return ConfirmationButton::make(__('Save'))
            ->icon('save')
            ->method('save');
    }
    public function commandBar(): array
    {

        $commands = $this->curdCommandBar();

        /*
        if ($this->getDisplayStatusSetButton() and $this->getMode() !== 'create' and $this->userHasActionPermission('status_set')) {
            array_push($commands, $this->statusSetButton());
        }
        */

        if ($this->display_save_button == true and $this->userHasActionPermission($this->getMode())) {
            array_push($commands, $this->saveButton());
        }
        return $commands;
    }

    abstract function curdCommandBar(): array;

    public function store(KlorchidEloquentModel $element,array $data)
    {


        $mode_message = $element->exists ? __("creating element") : __("updating element");
        $full_message = "Fail on: $mode_message";
        $action = $element->fill($data)->save();
        $pk_name = $element->getKeyName();
        try {
            if ($action) {
                $full_message = "Success on: $mode_message";
                Log::alert(self::class . " $mode_message on" . $element->getTable() . ' table with ' . $pk_name . '=' . $element->$pk_name);
                Alert::success($full_message);
            } else {
                Alert::success($full_message);
                Log::warning(self::class . "FAILED at $mode_message, on" . $element->getTable() . ' table with ' . $pk_name . '=' . $element->$pk_name);
            }

        } catch (\Illuminate\Database\QueryException $queryException) {
            Alert::success($full_message);
            Log::error("Save repository querry error on model save" . ' ' . $queryException->getMessage());
            //throw new \Exception("Save repository querry error on model save".' '.$queryException->getMessage());

        }
    }

    /**
     * if $mode is null will try to guess the mode, then set it
     *
     * {@inheritdoc}
     * @see \Kamansoft\Klorchid\Screens\KlorchidMultiModeScreen::setMode()
     */
    public function setMode(?string $mode = null): self
    {
        if (is_null($mode)) {
            $mode = $this->detectScreenModeLayout();
        }
        return parent::setMode($mode);
    }

    public function detectScreenModeLayout(): string
    {
        $mode_to_return = $this->getMode();



        $url_segments = request()->segments();

        $last_segment = array_pop($url_segments);

        // if last segment isent create or edit
        // we check for the segmet before the last one
        if (!($last_segment === 'create' or $last_segment === 'edit') and count($url_segments) > 1) {
            $last_segment = $url_segments[count($url_segments) - 1];
        }

        // dd($url_segments,$last_segment);

        if ($last_segment === 'create') {
            $mode_to_return = 'create';
        } else if ($last_segment === 'edit') {
            $edit_mode_permission = $this->crud_pemissions->get('edit');
            $view_mode_permission = $this->crud_pemissions->get('view');

            if (!empty($view_mode_permission) and $this->userHasPermission($view_mode_permission)) {
                $mode_to_return = 'view';
            }
            if (!empty($edit_mode_permission) and $this->userHasPermission($edit_mode_permission)) {
                $mode_to_return = 'edit';
            }
        }

        return $mode_to_return;
    }

    public function layout(): array
    {
        $mode_layout = parent::layout(); // TODO: Change the autogenerated stub
        if ($this->getDisplayStatusSetButton() and $this->userHasActionPermission('status_set')) {
            array_push($mode_layout, $this->statusSetModal());
        }
        return $mode_layout;
    }



    abstract public function viewModeLayout(): array;

    abstract public function editModeLayout(): array;

    abstract public function createModeLayout(): array;






}